{"version":3,"sources":["schemas/form-builder.ts","components/FormBuilder.tsx","components/FormViewer.tsx","components/SourceEditor.tsx","schemas/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formBuilderSchema","type","title","properties","fields","items","control","enum","default","key","label","required","dependencies","oneOf","options","Form","withTheme","MaterialUITheme","FormBuilder","props","value","onChange","schema","formData","event","FormViewer","useStyles","makeStyles","theme","createStyles","root","flexGrow","overflow","editor","height","mode","lineNumbers","window","innerHeight","SourceEditor","useState","setEditor","classes","source","JSON","stringify","useEffect","setSize","className","editorDidMount","onBeforeChange","data","transformToJsonSchema","builderSchema","filter","field","reduce","prev","formSchema","transformFieldSchema","App","setBuilderSchema","setFormSchema","setFormData","Typography","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","overrides","MuiButton","borderRadius","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b4765f9a.chunk.js","sourcesContent":["import { JSONSchema7 } from 'json-schema';\nimport { string } from 'yargs';\n\nexport type FormBuilderField = {\n  key: string;\n  label: string;\n  control: 'text' | 'checkbox' | 'select';\n  options?: string[];\n};\n\nexport type FormBuilderSchema = {\n  title: string;\n  fields: FormBuilderField[];\n};\n\nexport const formBuilderSchema: JSONSchema7 = {\n  type: 'object',\n  title: 'Form Builder',\n  properties: {\n    title: { type: 'string', title: 'Form Title' },\n    fields: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          control: {\n            type: 'string',\n            enum: ['text', 'checkbox', 'select'],\n            default: 'No',\n          },\n          key: {\n            type: 'string',\n          },\n          label: {\n            type: 'string',\n          },\n        },\n        required: ['control', 'key', 'label'],\n        dependencies: {\n          control: {\n            oneOf: [\n              {\n                properties: {\n                  control: {\n                    enum: ['text'],\n                  },\n                },\n              },\n              {\n                properties: {\n                  control: {\n                    enum: ['checkbox'],\n                  },\n                },\n              },\n              {\n                properties: {\n                  control: {\n                    enum: ['select'],\n                  },\n                  options: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n};\n","import React, { FC } from 'react';\nimport { withTheme } from '@rjsf/core';\nimport { Theme as MaterialUITheme } from '@rjsf/material-ui';\nimport { FormBuilderSchema, formBuilderSchema } from '../schemas/form-builder';\n\nconst Form = withTheme(MaterialUITheme);\n\ninterface FormBuilderProps {\n  value: FormBuilderSchema;\n  onChange: (schema: FormBuilderSchema) => void;\n}\n\nexport function FormBuilder(props: FormBuilderProps) {\n  const { value, onChange } = props;\n  return (\n    <Form\n      schema={formBuilderSchema}\n      formData={value}\n      onChange={(event) => onChange(event.formData)}\n    />\n  );\n}\n","import React, { FC } from 'react';\nimport { withTheme } from '@rjsf/core';\nimport { Theme as MaterialUITheme } from '@rjsf/material-ui';\n\nconst Form = withTheme(MaterialUITheme);\n\ninterface FormViewerProps {\n  schema: any;\n  value: any;\n  onChange: (value: any) => void;\n}\n\nexport function FormViewer(props: FormViewerProps) {\n  const { schema, value, onChange } = props;\n  return (\n    <Form\n      schema={schema}\n      formData={value}\n      onChange={(event) => onChange(event.formData)}\n    />\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      overflow: 'auto',\n    },\n    editor: {\n      height: 'calc(50vh - 24px)',\n    },\n  }),\n);\n\nconst options = {\n  mode: 'json',\n  theme: 'material',\n  lineNumbers: true,\n  height: window.innerHeight,\n}\n\nexport interface Props {\n  value: any;\n}\n\nexport default function SourceEditor(props: Props) {\n  const { value } = props;\n  const [editor, setEditor] = useState<any>(null);\n  const classes = useStyles();\n  const source = JSON.stringify(value, null, 2);\n  useEffect(() => {\n    editor?.setSize(null, window.innerHeight / 2 - 24);\n  });\n  return (\n    <div className={classes.root}>\n      <CodeMirror\n        className={classes.editor}\n        value={source}\n        options={options}\n        editorDidMount={(editor) => setEditor(editor)}\n        onBeforeChange={(editor, data, value) => {}}\n        onChange={(editor, data, value) => {}}\n      />\n    </div>\n  )\n}\n","import { JSONSchema7 } from 'json-schema';\nimport { FormBuilderField, FormBuilderSchema } from './form-builder';\n\nexport function transformFieldSchema(field: FormBuilderField): JSONSchema7 {\n  const formSchema: JSONSchema7 = {\n    title: field.label,\n  };\n  switch (field.control) {\n    case 'checkbox':\n      return {\n        type: 'boolean',\n        ...formSchema,\n      };\n    case 'text':\n      return {\n        type: 'string',\n        ...formSchema,\n      };\n    case 'select':\n      return {\n        type: 'string',\n        enum: field.options,\n        ...formSchema,\n      };\n  }\n}\n\nexport function transformToJsonSchema(\n  builderSchema: FormBuilderSchema\n): JSONSchema7 {\n  const schema: JSONSchema7 = {\n    type: 'object',\n    title: builderSchema.title,\n    properties: builderSchema.fields\n      .filter((field) => field.key && field.control as any !== 'No')\n      .reduce(\n        (prev, field) => ({\n          ...prev,\n          [field.key]: transformFieldSchema(field),\n        }),\n        {}\n      ),\n  };\n  return schema;\n}\n","import { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { FormBuilder } from './components/FormBuilder';\nimport { FormViewer } from './components/FormViewer';\nimport SourceEditor from './components/SourceEditor';\nimport { FormBuilderSchema } from './schemas/form-builder';\nimport { transformToJsonSchema } from './schemas/utils';\n\nfunction App() {\n  const [builderSchema, setBuilderSchema] = useState<FormBuilderSchema>({\n    title: '',\n    fields: [],\n  });\n  const [formSchema, setFormSchema] = useState({});\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    setFormSchema(transformToJsonSchema(builderSchema));\n    setFormData({});\n  }, [builderSchema]);\n  return (\n    <div className='App'>\n      <div className='form-builder'>\n        <FormBuilder value={builderSchema} onChange={setBuilderSchema} />\n      </div>\n      <div className='source-editor'>\n        <Typography>Builder Schema</Typography>\n        <SourceEditor value={builderSchema} />\n        <Typography>JSON Schema</Typography>\n        <SourceEditor value={formSchema} />\n      </div>{' '}\n      <div className='form-builder'>\n        <FormViewer schema={formSchema} value={formData} onChange={setFormData} />\n      </div>\n      <div className='source-editor'>\n        <Typography>Form Data</Typography>\n        <SourceEditor value={formData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@material-ui/core';\nimport { green } from '@material-ui/core/colors';\n\nconst theme = createTheme({\n  palette: {\n    // primary: green\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        borderRadius: 2,\n      }\n    }\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}