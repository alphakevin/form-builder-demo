{"version":3,"sources":["schemas/form-builder.ts","components/Form.tsx","components/FormBuilder.tsx","components/FormViewer.tsx","components/SourceEditor.tsx","schemas/utils.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["formBuilderSchema","type","title","properties","fields","items","control","enum","default","key","label","required","dependencies","oneOf","options","Form","withTheme","MaterialUITheme","FormBuilder","props","value","onChange","schema","formData","event","FormViewer","useStyles","makeStyles","theme","createStyles","root","flexGrow","overflow","editor","height","mode","lineNumbers","window","innerHeight","SourceEditor","editorRef","useRef","classes","source","JSON","stringify","updateSize","useCallback","current","setSize","useEffect","handleResize","addEventListener","removeEventListener","className","editorDidMount","onBeforeChange","data","transformToJsonSchema","builderSchema","filter","field","reduce","prev","formSchema","transformFieldSchema","App","useState","setBuilderSchema","setFormSchema","setFormData","Typography","variant","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","createTheme","palette","overrides","MuiButton","borderRadius","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.91ac9340.chunk.js","sourcesContent":["import { JSONSchema7 } from 'json-schema';\n\nexport type FormBuilderField = {\n  key: string;\n  label: string;\n  control: 'text' | 'checkbox' | 'select';\n  options?: string[];\n};\n\nexport type FormBuilderSchema = {\n  title: string;\n  fields: FormBuilderField[];\n};\n\nexport const formBuilderSchema: JSONSchema7 = {\n  type: 'object',\n  title: 'Form Builder',\n  properties: {\n    title: { type: 'string', title: 'Form Title' },\n    fields: {\n      type: 'array',\n      items: {\n        type: 'object',\n        properties: {\n          control: {\n            type: 'string',\n            enum: ['text', 'checkbox', 'select'],\n            default: 'No',\n          },\n          key: {\n            type: 'string',\n          },\n          label: {\n            type: 'string',\n          },\n        },\n        required: ['control', 'key', 'label'],\n        dependencies: {\n          control: {\n            oneOf: [\n              {\n                properties: {\n                  control: {\n                    enum: ['text'],\n                  },\n                },\n              },\n              {\n                properties: {\n                  control: {\n                    enum: ['checkbox'],\n                  },\n                },\n              },\n              {\n                properties: {\n                  control: {\n                    enum: ['select'],\n                  },\n                  options: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n            ],\n          },\n        },\n      },\n    },\n  },\n};\n","import { withTheme } from '@rjsf/core';\nimport { Theme as MaterialUITheme } from '@rjsf/material-ui';\n\nexport const Form = withTheme(MaterialUITheme);\n","import React from 'react';\nimport { FormBuilderSchema, formBuilderSchema } from '../schemas/form-builder';\nimport { Form } from './Form';\n\ninterface FormBuilderProps {\n  value: FormBuilderSchema;\n  onChange: (schema: FormBuilderSchema) => void;\n}\n\nexport function FormBuilder(props: FormBuilderProps) {\n  const { value, onChange } = props;\n  return (\n    <Form\n      schema={formBuilderSchema}\n      formData={value}\n      onChange={(event) => onChange(event.formData)}\n    />\n  );\n}\n","import React from 'react';\nimport { Form } from './Form';\n\ninterface FormViewerProps {\n  schema: any;\n  value: any;\n  onChange: (value: any) => void;\n}\n\nexport function FormViewer(props: FormViewerProps) {\n  const { schema, value, onChange } = props;\n  return (\n    <Form\n      schema={schema}\n      formData={value}\n      onChange={(event) => onChange(event.formData)}\n    />\n  );\n}\n","import React, { useCallback, useEffect, useRef } from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core';\nimport { Controlled as CodeMirror } from 'react-codemirror2';\nimport 'codemirror/lib/codemirror.css';\nimport 'codemirror/theme/material.css';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      overflow: 'auto',\n    },\n    editor: {\n      height: 'calc(50vh - 32px)',\n    },\n  })\n);\n\nconst options = {\n  mode: 'json',\n  theme: 'material',\n  lineNumbers: true,\n  height: window.innerHeight,\n};\n\nexport interface Props {\n  value: any;\n}\n\nexport function SourceEditor(props: Props) {\n  const { value } = props;\n  const editorRef = useRef<any>(null);\n  const classes = useStyles();\n  const source = JSON.stringify(value, null, 2);\n  const updateSize = useCallback(\n    () => editorRef.current?.setSize(null, window.innerHeight / 2 - 32),\n    []\n  );\n  useEffect(() => {\n    updateSize();\n    const handleResize = () => updateSize();\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  });\n  return (\n    <div className={classes.root}>\n      <CodeMirror\n        className={classes.editor}\n        value={source}\n        options={options}\n        editorDidMount={(editor) => (editorRef.current = editor)}\n        onBeforeChange={(editor, data, value) => {}}\n        onChange={(editor, data, value) => {}}\n      />\n    </div>\n  );\n}\n","import { JSONSchema7 } from 'json-schema';\nimport { FormBuilderField, FormBuilderSchema } from './form-builder';\n\nexport function transformFieldSchema(field: FormBuilderField): JSONSchema7 {\n  const formSchema: JSONSchema7 = {\n    title: field.label,\n  };\n  switch (field.control) {\n    case 'checkbox':\n      return {\n        type: 'boolean',\n        ...formSchema,\n      };\n    case 'text':\n      return {\n        type: 'string',\n        ...formSchema,\n      };\n    case 'select':\n      return {\n        type: 'string',\n        enum: field.options,\n        ...formSchema,\n      };\n  }\n}\n\nexport function transformToJsonSchema(\n  builderSchema: FormBuilderSchema\n): JSONSchema7 {\n  const schema: JSONSchema7 = {\n    type: 'object',\n    title: builderSchema.title,\n    properties: builderSchema.fields\n      .filter((field) => field.key && field.control as any !== 'No')\n      .reduce(\n        (prev, field) => ({\n          ...prev,\n          [field.key]: transformFieldSchema(field),\n        }),\n        {}\n      ),\n  };\n  return schema;\n}\n","import { Typography } from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport { FormBuilder } from './components/FormBuilder';\nimport { FormViewer } from './components/FormViewer';\nimport { SourceEditor } from './components/SourceEditor';\nimport { FormBuilderSchema } from './schemas/form-builder';\nimport { transformToJsonSchema } from './schemas/utils';\n\nfunction App() {\n  const [builderSchema, setBuilderSchema] = useState<FormBuilderSchema>({\n    title: '',\n    fields: [],\n  });\n  const [formSchema, setFormSchema] = useState({});\n  const [formData, setFormData] = useState({});\n  useEffect(() => {\n    setFormSchema(transformToJsonSchema(builderSchema));\n    setFormData({});\n  }, [builderSchema]);\n  return (\n    <div className='App'>\n      <div className='form-builder'>\n        <FormBuilder value={builderSchema} onChange={setBuilderSchema} />\n      </div>\n      <div className='source-editor'>\n        <Typography variant='h6'>Builder Schema</Typography>\n        <SourceEditor value={builderSchema} />\n        <Typography variant='h6'>JSON Schema</Typography>\n        <SourceEditor value={formSchema} />\n      </div>{' '}\n      <div className='form-builder'>\n        <FormViewer\n          schema={formSchema}\n          value={formData}\n          onChange={setFormData}\n        />\n      </div>\n      <div className='source-editor'>\n        <Typography>Form Data</Typography>\n        <SourceEditor value={formData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { createTheme, ThemeProvider } from '@material-ui/core';\n// import { green } from '@material-ui/core/colors';\n\nconst theme = createTheme({\n  palette: {\n    // primary: green\n  },\n  overrides: {\n    MuiButton: {\n      root: {\n        borderRadius: 2,\n      }\n    }\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}